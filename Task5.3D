import RPi.GPIO as GPIO
from tkinter import *
import tkinter.font
import time as sleep
#from gpiozero import LED

led = 14
GPIO.setwarnings(False)
GPIO.setmode(GPIO.BCM)
GPIO.setup(led, GPIO.OUT, initial=GPIO.LOW)

#led = LED(14)

#Letters in Morse Code
MCode = {
                        'A': '.-',
                        'B': '-...',
                        'C': '-.-.',
                        'D': '-..',
                        'E': '.',
                        'F': '..-.',
                        'G': '--.',
                        'H': '....',
                        'I': '..',
                        'J': '.---',
                        'K': '-.-',
			'L': '.-..',
                        'M': '--',
                        'N': '-.',
                        'O': '---',
                        'P': '.--.',
                        'Q': '--.-',
                        'R': '.-.',
                        'S': '...',
                        'T': '-',
                        'U': '..-',
                        'V': '...-',
                        'W': '.--',
                        'X': '-..-',
                        'Y': '-.--',
                        'Z': '--..',
			'0': '-----',
                        '1': '.----',
                        '2': '..---',
                        '3': '...--',
                        '4': '....-',
                        '5': '.....',
                        '6': '-....',
                        '7': '--...',
                        '8': '---..',
                        '9': '----.',
                }

#GUI
win = Tk()
win.title("Text to Morse Code")
myFont = tkinter.font.Font(family = "Calibri", size = 12, weight = "bold")

#---------------------------------------------------------------------------------------------------------------------->#Timing
def dot():
                GPIO.output(led, GPIO.HIGH)
                sleep(0.5)
                GPIO.output(led, GPIO.LOW)
                sleep(0.5)

def dash():
                GPIO.output(led, GPIO.HIGH)
                sleep(1.5)
                GPIO.output(led, GPIO.LOW)
                sleep(0.5)

def interCharDelay():
        sleep(1.5)

def interWordDelay():
        sleep(3.5)

#---------------------------------------------------------------------------------------------------------------------->#Morse Code Generator
def text_retrieve():
        input = mcText.get("1.0", "end-1c" ).upper()
        if len(input) > 12:
                #global dynLabel
                dynLabel["text"] = "You have exceeded the 12 character limit."

        elif len(input) < 1:
                dynLabel["text"] = "Enter text to convert to Morse Code."
        else:
                mcConvert(input)
                mcFlash(input)
        return

def mcConvert(input):
        morse =""
        for letter in input:
                if letter in MCode:
                        morse+=MCode[letter] + ""
                        dynLabel["text"] = "Conversion: "+morse

def mcFlash(input):
                for symbol in MCode[input]:
                        if letter == ".":
                                dot()
                                interCharDelay()
                        if letter == "-":
                                dash()
                                interCharDelay()
                        if letter == " ":
                                interWordDelay()
                return






#Exit
def close():
        GPIO.cleanup()
        win.destroy()

#--------------------------------------------------------------------------------------------------------------------
#Widgets
#Label
mcLabel1 = Label(win, text = "Enter Text to Convert Into Morse Code", font = myFont, width = 60, height = 2)
mcLabel1.pack(pady = 10)
mcLabel1.grid(row = 0, column = 1)

mcLabel2 = Label(win, text = "(Limit: 12 char - No Spaces)", font = myFont, width = 60, height = 2)
mcLabel2.grid(row = 1, column = 1)

#Error Label
dynLabel = Label(win, text = "", font = myFont, width = 55, height = 3)
dynLabel.grid(row = 3, column = 1)

#Text Box
mcText = Text(win, width = 55, height = 3)
mcText.grid(row = 2, column = 1)

#mcButton
mcButton = Button(win, text = "Convert", font = myFont, command = text_retrieve, bg = "white", height = 2, width = 20)
mcButton.grid(row = 4, column = 1)

mcCanvas = Canvas(win, height = 40, width = 6)
mcCanvas.grid(row = 6, column = 1)


#Exit
exitButton = Button(win, text = "Exit", font = myFont, command = close, bg = "white", height = 1, width = 5)
exitButton.grid(row = 4, column = 1)

win.protocol("WM DELETE WINDOW", close)

win.mainloop()
